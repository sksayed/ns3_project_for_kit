#!/usr/bin/env python3
"""
Analyze PCAP files for TCP connection paths and performance metrics.
This script processes PCAP files generated by 5G simulations to extract
TCP stream information and create visualizations.
"""

import os
import glob
import subprocess
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import re
from collections import defaultdict

# Configuration
PCAP_DIR = "5g_outputs"
PCAP_GLOB = os.path.join(PCAP_DIR, "5g_playfield_rw_pcap-*.pcap")

def run_tshark_command(pcap_file, fields):
    """Run tshark command to extract specified fields from PCAP file."""
    field_str = " ".join([f"-e {field}" for field in fields])
    cmd = f"tshark -r {pcap_file} -T fields {field_str} -E header=y -E separator=,"
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            return result.stdout
        else:
            print(f"Warning: tshark failed for {pcap_file}: {result.stderr}")
            return ""
    except subprocess.TimeoutExpired:
        print(f"Warning: tshark timeout for {pcap_file}")
        return ""
    except Exception as e:
        print(f"Warning: Error running tshark on {pcap_file}: {e}")
        return ""

def extract_tcp_streams(pcap_file):
    """Extract TCP stream information from PCAP file."""
    fields = [
        "frame.time_relative",
        "ip.src",
        "ip.dst", 
        "tcp.srcport",
        "tcp.dstport",
        "tcp.stream",
        "tcp.len",
        "tcp.flags",
        "tcp.seq",
        "tcp.ack"
    ]
    
    output = run_tshark_command(pcap_file, fields)
    if not output:
        return pd.DataFrame()
    
    # Parse CSV output
    lines = output.strip().split('\n')
    if len(lines) < 2:
        return pd.DataFrame()
    
    # Convert to DataFrame
    data = []
    for line in lines[1:]:  # Skip header
        parts = line.split(',')
        if len(parts) >= len(fields):
            try:
                data.append({
                    'time': float(parts[0]) if parts[0] else 0.0,
                    'src_ip': parts[1],
                    'dst_ip': parts[2],
                    'src_port': int(parts[3]) if parts[3] else 0,
                    'dst_port': int(parts[4]) if parts[4] else 0,
                    'stream_id': int(parts[5]) if parts[5] else 0,
                    'tcp_len': int(parts[6]) if parts[6] else 0,
                    'flags': parts[7],
                    'seq': int(parts[8]) if parts[8] else 0,
                    'ack': int(parts[9]) if parts[9] else 0
                })
            except (ValueError, IndexError):
                continue
    
    return pd.DataFrame(data)

def analyze_tcp_performance(df):
    """Analyze TCP performance metrics."""
    if df.empty:
        return pd.DataFrame()
    
    results = []
    
    for stream_id in df['stream_id'].unique():
        stream_data = df[df['stream_id'] == stream_id]
        if stream_data.empty:
            continue
        
        # Basic metrics
        total_bytes = stream_data['tcp_len'].sum()
        duration = stream_data['time'].max() - stream_data['time'].min()
        throughput = (total_bytes * 8) / (duration * 1e6) if duration > 0 else 0  # Mbps
        
        # Packet counts
        total_packets = len(stream_data)
        data_packets = len(stream_data[stream_data['tcp_len'] > 0])
        
        # Connection info
        src_ip = stream_data['src_ip'].iloc[0]
        dst_ip = stream_data['dst_ip'].iloc[0]
        src_port = stream_data['src_port'].iloc[0]
        dst_port = stream_data['dst_port'].iloc[0]
        
        # Flags analysis
        syn_count = len(stream_data[stream_data['flags'].str.contains('S', na=False)])
        fin_count = len(stream_data[stream_data['flags'].str.contains('F', na=False)])
        ack_count = len(stream_data[stream_data['flags'].str.contains('A', na=False)])
        
        results.append({
            'stream_id': stream_id,
            'src_ip': src_ip,
            'dst_ip': dst_ip,
            'src_port': src_port,
            'dst_port': dst_port,
            'total_bytes': total_bytes,
            'total_packets': total_packets,
            'data_packets': data_packets,
            'duration': duration,
            'throughput_mbps': throughput,
            'syn_count': syn_count,
            'fin_count': fin_count,
            'ack_count': ack_count
        })
    
    return pd.DataFrame(results)

def plot_tcp_throughput(df, out_dir):
    """Plot TCP throughput by stream."""
    if df.empty:
        return
    
    plt.figure(figsize=(12, 6))
    
    # Throughput by stream
    plt.subplot(1, 2, 1)
    streams = df['stream_id'].unique()
    throughputs = [df[df['stream_id'] == s]['throughput_mbps'].iloc[0] for s in streams]
    
    plt.bar(range(len(streams)), throughputs, alpha=0.7, color='skyblue', edgecolor='black')
    plt.xlabel('TCP Stream ID')
    plt.ylabel('Throughput (Mbps)')
    plt.title('5G TCP Stream Throughput')
    plt.grid(True, alpha=0.3)
    
    # Bytes transferred by stream
    plt.subplot(1, 2, 2)
    bytes_transferred = [df[df['stream_id'] == s]['total_bytes'].iloc[0] for s in streams]
    
    plt.bar(range(len(streams)), [b/1e6 for b in bytes_transferred], alpha=0.7, color='lightcoral', edgecolor='black')
    plt.xlabel('TCP Stream ID')
    plt.ylabel('Data Transferred (MB)')
    plt.title('5G TCP Data Volume by Stream')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(os.path.join(out_dir, 'tcp_analysis.png'), dpi=300, bbox_inches='tight')
    plt.close()

def plot_tcp_timeline(df, out_dir):
    """Plot TCP packet timeline."""
    if df.empty:
        return
    
    plt.figure(figsize=(15, 8))
    
    # Plot packet sizes over time for each stream
    colors = plt.cm.tab10(np.linspace(0, 1, len(df['stream_id'].unique())))
    
    for i, stream_id in enumerate(df['stream_id'].unique()):
        stream_data = df[df['stream_id'] == stream_id]
        plt.scatter(stream_data['time'], stream_data['tcp_len'], 
                   c=[colors[i]], label=f'Stream {stream_id}', alpha=0.6, s=20)
    
    plt.xlabel('Time (seconds)')
    plt.ylabel('TCP Payload Length (bytes)')
    plt.title('5G TCP Packet Timeline')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(os.path.join(out_dir, 'tcp_timeline.png'), dpi=300, bbox_inches='tight')
    plt.close()

def analyze_connection_patterns(df):
    """Analyze TCP connection patterns and paths."""
    if df.empty:
        return pd.DataFrame()
    
    patterns = []
    
    for stream_id in df['stream_id'].unique():
        stream_data = df[df['stream_id'] == stream_id]
        if stream_data.empty:
            continue
        
        # Connection establishment
        syn_packets = stream_data[stream_data['flags'].str.contains('S', na=False)]
        fin_packets = stream_data[stream_data['flags'].str.contains('F', na=False)]
        
        # Connection duration
        if not syn_packets.empty and not fin_packets.empty:
            conn_duration = fin_packets['time'].iloc[-1] - syn_packets['time'].iloc[0]
        else:
            conn_duration = stream_data['time'].max() - stream_data['time'].min()
        
        # Data transfer efficiency
        total_bytes = stream_data['tcp_len'].sum()
        data_efficiency = total_bytes / (conn_duration * 1e6) if conn_duration > 0 else 0
        
        patterns.append({
            'stream_id': stream_id,
            'src_ip': stream_data['src_ip'].iloc[0],
            'dst_ip': stream_data['dst_ip'].iloc[0],
            'src_port': stream_data['src_port'].iloc[0],
            'dst_port': stream_data['dst_port'].iloc[0],
            'connection_duration': conn_duration,
            'data_efficiency_mbps': data_efficiency,
            'packet_count': len(stream_data),
            'avg_packet_size': stream_data['tcp_len'].mean()
        })
    
    return pd.DataFrame(patterns)

def main():
    """Main analysis function."""
    print("Analyzing 5G TCP paths from PCAP files...")
    
    # Ensure output directory exists
    os.makedirs(PCAP_DIR, exist_ok=True)
    
    # Find PCAP files
    pcap_files = glob.glob(PCAP_GLOB)
    if not pcap_files:
        print(f"No PCAP files found matching pattern: {PCAP_GLOB}")
        return
    
    print(f"Found {len(pcap_files)} PCAP files")
    
    all_streams = []
    all_connections = []
    
    # Process each PCAP file
    for pcap_file in pcap_files:
        print(f"Processing {os.path.basename(pcap_file)}...")
        
        # Extract TCP streams
        streams_df = extract_tcp_streams(pcap_file)
        if streams_df.empty:
            print(f"  No TCP data found in {pcap_file}")
            continue
        
        # Analyze performance
        performance_df = analyze_tcp_performance(streams_df)
        if not performance_df.empty:
            all_streams.append(performance_df)
        
        # Analyze connection patterns
        patterns_df = analyze_connection_patterns(streams_df)
        if not patterns_df.empty:
            all_connections.append(patterns_df)
    
    # Combine all results
    if all_streams:
        combined_streams = pd.concat(all_streams, ignore_index=True)
        combined_streams.to_csv(os.path.join(PCAP_DIR, 'tcp_streams_analysis.csv'), index=False)
        print(f"✓ Analyzed {len(combined_streams)} TCP streams")
        
        # Generate visualizations
        plot_tcp_throughput(combined_streams, PCAP_DIR)
        print("✓ TCP throughput plot created")
        
        # Plot timeline for first few streams
        if not streams_df.empty:
            plot_tcp_timeline(streams_df, PCAP_DIR)
            print("✓ TCP timeline plot created")
    
    if all_connections:
        combined_connections = pd.concat(all_connections, ignore_index=True)
        combined_connections.to_csv(os.path.join(PCAP_DIR, 'tcp_connections_analysis.csv'), index=False)
        print(f"✓ Analyzed {len(combined_connections)} TCP connections")
    
    print(f"\nAnalysis complete. Results saved to: {PCAP_DIR}/")
    print("Files generated:")
    print("  - tcp_streams_analysis.csv")
    print("  - tcp_connections_analysis.csv") 
    print("  - tcp_analysis.png")
    print("  - tcp_timeline.png")

if __name__ == "__main__":
    main()
